{"version":3,"sources":["scripts/main.js"],"names":["board","gameField","document","querySelector","startButton","startMessage","winMessage","loseMessage","initialClassName","score","scoreCounter","nowhereToGo","startGame","removeEventListener","handleClick","addEventListener","innerText","clearBoard","setRandomTile","classList","add","hideMessage","restartGame","window","moveListener","updateCells","getTiles","arr","filter","val","e","originalBoard","JSON","stringify","key","moveLeft","moveRight","moveUp","moveDown","checkForWin","checkForLose","move","row","i","length","push","r","reverse","c","confirm","showMessage","remove","forEach","some","cell","hasLost","message","contains","boardRow","boardRowIndex","boardCellValue","boardCellIndex","rows","cells","className","setTimeout","numberOfRows","getRandomRow","Math","floor","random","getRandomCol","getTwoOrFour","randomNum"],"mappings":"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","file":"main.65c690a7.js","sourceRoot":"..\\src","sourcesContent":["\"use strict\";\r\n\r\n// * initializing variables\r\nlet board;\r\nconst gameField = document.querySelector(\"tbody\");\r\nconst startButton = document.querySelector(\".button.start\");\r\nconst startMessage = document.querySelector(\".message.message-start\");\r\nconst winMessage = document.querySelector(\".message.message-win\");\r\nconst loseMessage = document.querySelector(\".message.message-lose\");\r\nconst initialClassName = \"field-cell\";\r\nconst score = document.querySelector(\".game-score\");\r\nlet scoreCounter = 0;\r\nlet nowhereToGo = false;\r\n\r\nstartGame();\r\n\r\n// * calls handleClick on startButton click\r\nfunction startGame() {\r\n  startButton.removeEventListener(\"click\", handleClick);\r\n  startButton.addEventListener(\"click\", handleClick);\r\n}\r\n\r\n// * main function that starts a game and calls all helper functions\r\nfunction handleClick() {\r\n  if (startButton.innerText === \"Start\") {\r\n    clearBoard();\r\n    setRandomTile();\r\n    setRandomTile();\r\n    startButton.innerText = \"Restart\";\r\n    startButton.classList.add(\"restart\");\r\n    hideMessage(startMessage);\r\n  } else {\r\n    restartGame();\r\n  }\r\n\r\n  window.addEventListener(\"keyup\", moveListener);\r\n  updateCells();\r\n}\r\n\r\nconst getTiles = (arr) => arr.filter((val) => val !== 0);\r\n\r\n// * on Arrow clicks cells move\r\nfunction moveListener(e) {\r\n  const originalBoard = JSON.stringify(board);\r\n\r\n  switch (e.key) {\r\n    case \"ArrowLeft\":\r\n      moveLeft();\r\n      break;\r\n\r\n    case \"ArrowRight\":\r\n      moveRight();\r\n      break;\r\n\r\n    case \"ArrowUp\":\r\n      moveUp();\r\n      break;\r\n\r\n    case \"ArrowDown\":\r\n      moveDown();\r\n      break;\r\n  }\r\n\r\n  // * setting random tile if there was a movement\r\n  if (JSON.stringify(board) !== originalBoard) {\r\n    nowhereToGo = false;\r\n    setRandomTile();\r\n  } else {\r\n    nowhereToGo = true;\r\n  }\r\n\r\n  checkForWin();\r\n  checkForLose();\r\n  updateCells();\r\n}\r\n\r\n// * helper function for movement which checks merging as well\r\nfunction move(row) {\r\n  row = getTiles(row);\r\n\r\n  for (let i = 0; i < row.length - 1; i++) {\r\n    if (row[i] === row[i + 1]) {\r\n      row[i] *= 2;\r\n      row[i + 1] = 0;\r\n      scoreCounter += row[i];\r\n      score.innerText = scoreCounter;\r\n    }\r\n  }\r\n\r\n  row = getTiles(row);\r\n\r\n  while (row.length < board[0].length) {\r\n    row.push(0);\r\n  }\r\n\r\n  return row;\r\n}\r\n\r\n// * func that provides ability to move cells to the right\r\nfunction moveRight() {\r\n  for (let r = 0; r < board.length; r++) {\r\n    const row = board[r];\r\n\r\n    row.reverse();\r\n    board[r] = move(row);\r\n    board[r].reverse();\r\n  }\r\n}\r\n\r\n// * func that provides ability to move cells to the left\r\nfunction moveLeft() {\r\n  for (let r = 0; r < board.length; r++) {\r\n    let row = board[r];\r\n\r\n    row = move(row);\r\n    board[r] = row;\r\n  }\r\n}\r\n\r\n// * func that provides ability to move cells to the top\r\nfunction moveUp() {\r\n  for (let c = 0; c < board[0].length; c++) {\r\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\r\n\r\n    row = move(row);\r\n    board[0][c] = row[0];\r\n    board[1][c] = row[1];\r\n    board[2][c] = row[2];\r\n    board[3][c] = row[3];\r\n  }\r\n}\r\n\r\n// * func that provides ability to move cells to the bottom\r\nfunction moveDown() {\r\n  for (let c = 0; c < board[0].length; c++) {\r\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\r\n\r\n    row.reverse();\r\n    row = move(row);\r\n    row.reverse();\r\n    board[0][c] = row[0];\r\n    board[1][c] = row[1];\r\n    board[2][c] = row[2];\r\n    board[3][c] = row[3];\r\n  }\r\n}\r\n\r\n// * restart button modification\r\nfunction restartGame() {\r\n  const confirmed = window.confirm(\"Are you sure you want to restart game?\");\r\n\r\n  if (!confirmed) {\r\n    return;\r\n  }\r\n\r\n  hideMessage(winMessage);\r\n  hideMessage(loseMessage);\r\n  showMessage(startMessage);\r\n  clearBoard();\r\n  score.innerText = 0;\r\n  scoreCounter = 0;\r\n\r\n  startButton.innerText = \"Start\";\r\n  startButton.classList.remove(\"restart\");\r\n\r\n  startGame();\r\n}\r\n\r\n// * checking if we have a winner\r\nfunction checkForWin() {\r\n  board.forEach((row) => {\r\n    if (row.some((cell) => cell === 2048)) {\r\n      showMessage(winMessage);\r\n      window.removeEventListener(\"keyup\", moveListener);\r\n    }\r\n  });\r\n}\r\n\r\n// * checking if we have a loser\r\nfunction checkForLose() {\r\n  let hasLost = true;\r\n\r\n  for (let r = 0; r < board.length; r++) {\r\n    for (let c = 0; c < board[r].length; c++) {\r\n      if (board[r][c] === 0) {\r\n        hasLost = false;\r\n        break;\r\n      }\r\n\r\n      if (r < board.length - 1 && board[r][c] === board[r + 1][c]) {\r\n        hasLost = false;\r\n        break;\r\n      }\r\n\r\n      if (c < board[r].length - 1 && board[r][c] === board[r][c + 1]) {\r\n        hasLost = false;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (!hasLost) {\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (hasLost) {\r\n    showMessage(loseMessage);\r\n    window.removeEventListener(\"keyup\", moveListener);\r\n  }\r\n}\r\n\r\n// * hiding message func\r\nfunction hideMessage(message) {\r\n  if (!message.classList.contains(\"hidden\")) {\r\n    message.classList.add(\"hidden\");\r\n  }\r\n}\r\n\r\n// * showing message func\r\nfunction showMessage(message) {\r\n  return message.classList.remove(\"hidden\");\r\n}\r\n\r\n// * clearing board\r\nfunction clearBoard() {\r\n  board = [\r\n    [0, 0, 0, 0],\r\n    [0, 0, 0, 0],\r\n    [0, 0, 0, 0],\r\n    [0, 0, 0, 0],\r\n  ];\r\n}\r\n\r\n// * update Tile's value and class\r\nfunction updateCells() {\r\n  board.forEach((boardRow, boardRowIndex) => {\r\n    boardRow.forEach((boardCellValue, boardCellIndex) => {\r\n      const cell = gameField.rows[boardRowIndex].cells[boardCellIndex];\r\n\r\n      cell.innerText = \"\";\r\n      cell.className = initialClassName;\r\n\r\n      if (boardCellValue > 0 && boardCellValue <= 2048) {\r\n        cell.innerText = boardCellValue;\r\n        cell.classList.add(`${initialClassName}--${boardCellValue}`);\r\n\r\n        if (!nowhereToGo) {\r\n          cell.classList.add(`${initialClassName}--merge-animation`);\r\n\r\n          setTimeout(() => {\r\n            cell.classList.remove(`${initialClassName}--merge-animation`);\r\n          }, 150);\r\n        }\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n// * func to set 2 or 4 in random position in the board\r\nfunction setRandomTile() {\r\n  const numberOfRows = 4;\r\n  const numberOfCells = 4;\r\n\r\n  const getRandomRow = Math.floor(Math.random() * numberOfRows);\r\n  const getRandomCol = Math.floor(Math.random() * numberOfCells);\r\n\r\n  if (board[getRandomRow][getRandomCol] !== 0) {\r\n    setRandomTile();\r\n\r\n    return;\r\n  }\r\n\r\n  board[getRandomRow][getRandomCol] = getTwoOrFour();\r\n}\r\n\r\n// * getting random number (2 or 4)\r\nfunction getTwoOrFour() {\r\n  const randomNum = Math.random();\r\n\r\n  return randomNum > 0.1 ? 2 : 4;\r\n}\r\n"]}